#!/usr/bin/env ruby

require 'clockout'

HELP_BANNER = <<-EOS
Clockout v0.2
Usage:
        $ clock [options]

Options:
      --estimations, -e:   Show estimations made for first commit of each block
        --condensed, -c:   Condense output (don't show the timeline for each day)
   --generate-clock, -g:   Generate config file
             --help, -h:   Show this message
EOS

TEMPLATE_CLOCKFILE = <<-EOF
### General options ###

# Ignore initial commit, if it's just template/boilerplate
# - Default: false

#ignore_initial: true

# Minimum time between blocks of commits
# - Default: 120 min (change if you think some commits took you more than 2 hours)

#time_cutoff: 90


### Time-estimation options for each first commit of a timeblock ###

# Diffs of files matched by this regex will be included in commit time estimation.
# With some projects, there are diffs to binaries, images, files modified by an IDE, etc,
# that you don't want to report as your own work. Below is an example regex that will only
# calculate changes made to files with those extensions
# - Default:  /.*/ (matches everything)

#my_files: /\\.(m|h|txt)$/

# Diffs of files matched by this regex will NOT be included in commit time estimation
# You also have the option of defining a negative regex match, to ignore certain files.
# For example, if you added an external library or something, you should ignore it
# - Default:  <nothing>

#not_my_files: /SomeThirdPartyLibrary\\.*$/

# Estimation factor
# Use the -e option to see the estimations Clockout makes, and tweak them using this 
# value as necessary.
# - Default: 1.0

#estimation_factor: 0.9

# Put any override times for specific commits here (minutes). (You can use SHA1 hashes of any length)
# Note: keep a space before each hash for the YAML to parse properly.

#overrides:
# 48f63a7b: 90
# d354a31a: 30


### Clock-ins/-outs ###

# Do not modify these directly; use the `clock in` and `clock out` commands.
# See the readme for more details.

out:
in:

EOF

def parse_options(args)
    opts = {}

    args.each do |arg|
        if (arg == "-h" || arg == "--help")
            opts[:help] = true
        elsif (arg == "-e" || arg == "--estimations")
            opts[:estimations] = true
        elsif (arg == "-c" || arg == "--condensed")
            opts[:condensed] = true
        elsif (arg == "-g" || arg == "--generate-clock")
            opts[:generate_clock] = true
        else
            puts_error "invalid option '#{arg}'."
            puts "Try --help for help."
            exit
        end
    end

    opts
end

def clock_path(path = nil)
    @clock_path ||= Clockout.clock_path(Clockout.root_path(path))
end

def generate_clock_file(path)
    path = clock_path(path)
    if (File.exists?(path))
        false
    else
        File.open(path, "w") do |file|
            file.write(TEMPLATE_CLOCKFILE)
        end
        puts "Generated config file at #{path}."
        true
    end
end

path = Dir.pwd

if (ARGV[0] == "in" || ARGV[0] == "out")
    # Generate a clock file if one doesn't already exist
    generate_clock_file(path)

    # Add the in/out date to the file
    buf = ""
    mod = false
    seek_line = ARGV[0] + ":"
    time_line = "- " + Time.new.to_s + "\n"
    File.foreach(clock_path) do |line|
        buf += line
        if line.strip == seek_line
            mod = true
            buf += time_line
        end
    end
    File.open(clock_path, "w") do |file|
        file << buf
        # Add in: or out:, along with the time if it doesn't exist
        file << "\n#{seek_line}\n#{time_line}" if !mod
    end
else
    opts = parse_options(ARGV)
    
    if opts[:help]
        puts HELP_BANNER
        exit
    end

    if opts[:generate_clock]
        if !generate_clock_file(path) && clock_path
            puts_error "config file already exists for this repo: #{clock_path}"
        end
        exit
    end

    clock = Clockout.new(path)

    if (opts[:estimations])
        clock.print_estimations
    else
        clock.print_chart(opts[:condensed])
    end
end
