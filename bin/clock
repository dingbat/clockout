#!/usr/bin/env ruby

require 'clockout'

VERSION = "0.6"

HELP_BANNER = <<-EOS

See hours:
    $ clock [options]

Options:
    --estimations, -e:  Show estimations made, if any
      --condensed, -c:  Condense output (don't show the timeline for each day)
 --user, -u (<email>):  Only count current user's commits (or specified user)
           --help, -h:  Show this message

Generators:
    $ clock generate config  Generate config file (clock.yml)
    $ clock generate hook    Generate a post-commit hook for clockout!

Other:
    $ clock in      Clock-in (when you start working, preceding a commit)
    $ clock out     Clock-out (after you've worked overtime following a commit)

(Both of these accept an optional argument that offsets the clock time, in minutes)

EOS

TEMPLATE_CLOCKFILE = <<-EOF
### General options ###

# Ignore initial commit, if it's just template/boilerplate
# - Default: false

#ignore_initial: true

# Minimum time between blocks of commits
# - Default: 120 min (change if you think some commits took you more than 2 hours)

#time_cutoff: 90

# Estimation factor (for each first commit of a timeblock)
# Use the -e option to see the estimations Clockout makes, and tweak them using this 
# value as necessary.
# - Default: 1.0

#estimation_factor: 0.9

# Put any override times for specific commits here (minutes). (You can use SHA1 hashes
# of any length). Useful for ignoring commits that add 3rd party libraries, say.
# Note: keep a space before each hash for the YAML to parse properly.

#overrides:
# 48f63a7b: 90
# d354a31a: 30


### Clock-ins/-outs ###

# Do not modify these directly; use the `clock in` and `clock out` commands.
# See the readme for more details.

out:
in:

EOF

def parse_options(args)
    opts = {}

    i = 0
    while i < args.length
        arg = args[i]
        next_arg = args[i+1]
        case arg
        when "-e", "--estimations"
            opts[:estimations] = true
        when "-c", "--condensed"
            opts[:condensed] = true
        when "-u", "--user"
            if next_arg && next_arg[0] != '-'
                opts[:user] = next_arg #specified email address
                i += 1
            else
                opts[:user] = current_git_user #use current user
            end
        else
            puts_error "invalid option '#{arg}'."
            puts "Try --help for help."
            exit
        end
        i += 1
    end

    opts
end

def clock_path(path = nil)
    @clock_path ||= Clockout.clock_path(Clockout.root_path(path))
end

def generate_clock_file
    path = clock_path(Dir.pwd)
    if (File.exists?(path))
        false
    else
        File.open(path, "w") do |file|
            file.write(TEMPLATE_CLOCKFILE)
        end
        puts "Generated config file at #{path}."
        true
    end
end

def current_git_user
    `git config user.email`.strip
end

def clock_in_out(inout, offset=nil)
    # Generate a clock file if one doesn't already exist
    generate_clock_file

    now = Time.now
    now += offset.to_i*60 if offset

    # Add the in/out date to the file
    buf = ""
    mod = false
    seek_line = "#{inout}:"
    time_line = "- #{now}: #{current_git_user}\n"
    File.foreach(clock_path) do |line|
        buf += line
        if line.strip == seek_line
            mod = true
            buf += time_line
        end
    end
    File.open(clock_path, "w") do |file|
        file << buf
        # Add in: or out:, along with the time if it doesn't exist
        file << "\n#{seek_line}\n#{time_line}" if !mod
    end
end

def last
    #need a decent amount of commits so we can get a good estimation of diffs rate (for pioneer commits), 
    #but we don't want the hook to take too long
    num = 150
    last = Clockout.new(Dir.pwd, nil, num).last
    puts "[clockout] ".green + "#{last.minutes.round(2)} minutes logged" if last
end

def generate(item)
    root = Clockout.root_path(Dir.pwd) || return
    case item
    when "config"
        if !generate_clock_file && clock_path
            puts_error "config file already exists for this repo: #{clock_path}"
        end
    when "hook"
        hook_path = root+"/.git/hooks/post-commit"
        hook_txt = "#clockout\nclock last"
        if File.exist? hook_path
            contents = File.open(hook_path).read
            if (contents[hook_txt])
                puts_error "post-commit clock hook already added"
            else
                #append to existing hook file
                File.open(hook_path, "a") do |file|
                    file.puts "\n\n#{hook_txt}"
                end
            end
        else
            File.open(hook_path, "w") do |file|
                file.puts "#!/bin/sh\n\n#{hook_txt}"
            end
            File.chmod(0755, hook_path)
        end
    else
        puts_error "invalid generator '#{item}' (there's only 'config' and 'hook', see --help)."
    end
end

def output_data(estimations, condensed, user)
    puts "Showing hours for #{user}" if user

    max = 800
    clock = Clockout.new(Dir.pwd, user, max)
    printer = Printer.new(clock)

    if (estimations)
        printer.print_estimations
    else
        printer.print_chart(condensed)
    end

    if (clock.maxed_out)
        puts "** only showing the #{max} most recent commits **"
    end
end

def run(args)
    case args[0]
    when "in", "out"
        clock_in_out(args[0], args[1]) #optional offset (in minutes) for in/out    
    when "last"
        last
    when "generate"
        generate(args[1]) #item to be generated
    else
        case
        when args.include?("-h"), args.include?("--help")
            puts HELP_BANNER
        when args.include?("-v"), args.include?("--version")
            puts VERSION
        else    
            opts = parse_options(args)
            output_data(opts[:estimations], opts[:condensed], opts[:user])
        end
    end
end

run(ARGV)

