; Example .clock file. Place this file at the root of your git repo, configured to your liking!



; Ignore initial commit, if it's just template/boilerplate
;   Type:     BOOL
;   Default:  0

;ignore_initial = 1


; Minimum time between blocks of commits
;   Type:     Int (in minutes)
;   Default:  120
;
; Default is 120, so if you think some commits took you more than 2 hours, you should shorten this

;time_cutoff = 90



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
;; FIRST-COMMIT-OF-TIMEBLOCK ESTIMATION OPTIONS
;;



; Diffs of files matched by this regex will be included in commit time estimation
;   Type:     Regex (Ruby)
;   Default:  /.*/ (matches everything)
;
; With some projects, there are diffs to binaries, images, files modified by an IDE, etc,
; that you don't want to report as your own work.
; Below is an example regex that will only calculate changes made to files with those extensions

;my_files = /\.(m|h|rb|txt)$/


; Diffs of files matched by this regex will NOT be included in commit time estimation
;   Type:     Regex (Ruby)
;   Default:  <nothing>
;
; You also have the option of defining a negative regex match, to ignore certain files.
; For example, if you added an external library or something, you should ignore those additions

;not_my_files = /(ThisFile\.cpp | SomeOtherClass\.*)/


; Completion time overrides for first commit estimations
;   Type:     Int (in minutes)
;
; If some estimations made by Clockout are that bad, you can override specific commits.
; Put SHA's here, setting them to the time that you think it took you to complete that task.

;7deec149 = 25
;5a6105e6 = 15
;4325de58 = 120
